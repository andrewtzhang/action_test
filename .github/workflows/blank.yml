# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  issue_comment:
    types: [created]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      TEST_INPUT:
        description: "Test input"
        required: false
        default: "1"

env:
  TEST_INPUT: ${{ inputs.TEST_INPUT || '1' }}
  DEFAULT_TEST: 12345
  
  # ${{ fromJSON('[${{inputs.TEST_INPUT}} , "1"]')[inputs.TEST_INPUT == ''] }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test_out:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/test')
    outputs:
      STRING: ${{ steps.send_out.outputs.PR_SHA }}
    steps:
    - uses: actions/checkout@v4
    - name: send out
      id: send_out
      run: |
        echo "PR_SHA=123456" >> $GITHUB_OUTPUT
    

  # This workflow contains a single job called "build"
  comment_parser:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/test')
    steps:
    - uses: actions/checkout@v4
    - name: comment
      id: comment
      uses: ./.github/actions/input_parser
    - name: echo
      id: echo
      run: |
        echo "test: ${{ steps.comment.outputs.test }}"
        echo "testcase=allthetests}" >> $GITHUB_ENV
    - name: py
      run: |
        cd ${{github.workspace}}
        cat > script.py << EOF
        import argparse
        import os
        def set_output(name, value):
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                print(f'{name}={value}', file=fh)
        parser = argparse.ArgumentParser()
        parser.add_argument('-t', '--test', default=${{ env.DEFAULT_TEST }})
        args = parser.parse_args()
        for name, value in vars(args).items(): 
            if value:
                set_output(name, value)
                print(f"{name}={value}")
        EOF
    - name: print
      id: parse
      env:
        comment: ${{ github.event.comment.body }}
      run: |
        line=$(echo "$comment" | grep '/test')
        command=$(echo $line | sed -e 's/\/test//')
        eval "python3 script.py $command"
    - name: check
      run: |
        echo $DEFAULT_TEST

  comment:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/test')
    needs: [ comment_parser, test_out ]
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const pr_number = context.payload.issue.number;
            const repo_full_name = context.payload.repository.full_name;
            const run_id = context.runId;
            const run_url = `https://github.com/${repo_full_name}/actions/runs/${run_id}`;
            const comment_body = `Workflow run for this PR: ${run_url}`;
          
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment_body
            })
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump env context
        run: echo "${{ needs.test_out.outputs.STRING }}"
      - name: Summary pr
        run: |
          echo "# Test run" >> $GITHUB_STEP_SUMMARY
          echo "Comment: ${{ github.event.comment.html_url }}" >> $GITHUB_STEP_SUMMARY
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo ${{env.TEST_INPUT}}

      - name: github context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
